[
  {
    "name": "Interactive ML-Powered Anime Recommendation Tool",
    "description": "An anime recommendation engine powered by a custom-built neural network.  Using a dataset of user profiles from the popular site MyAnimeList, the network was trained entirely in the browser via Tensorflow.JS.\n\nThe whole thing is implemented as a SvelteKit app with predictions happening directly within the app itself using tfjs-node and a background thread.  Additional post-processing is applied to work around imbalances due to large popularity differences. It also contains support for determining which ratings contribute most to each of the recommendations.",
    "projectUrl": "https://anime.ameo.dev",
    "srcUrl": null,
    "technologies": [
      "TypeScript",
      "Svelte",
      "SvelteKit",
      "Machine Learning",
      "Neural Networks",
      "Tensorflow"
    ],
    "pageUrl": null,
    "image": "anime-recommendations.png",
    "imageAlt": "A screenshot of the anime recommendations page of the site showing the UI and several recommended animes",
    "startDate": "Apr. 2022",
    "endDate": "May 2022"
  },
  {
    "name": "Interactive 2D Anime Embedding Visualization",
    "description": "In a similar vein to the Music Galaxy (a few projects down), this is an embedding visualization that is constructed based off of relationships between anime.  A co-occurrence matrix is constructed from a large dataset of user anime rankings which is then used to construct a variety of embeddings using different algorithms (PyMDE + GGVec) and parameters.  The embedding is then projected into 2D with t-SNE.\n\nThe visualization itself is built with PIXI.JS and has the ability to search + fly to anime as well as load in user profiles from MyAnimeList to visualize where one's own anime rankings lie in the broader context.",
    "projectUrl": "https://anime.ameo.dev/pymde_3d_40n",
    "srcUrl": null,
    "technologies": ["TypeScript", "PIXI.JS", "Svelte", "SvelteKit", "Python"],
    "pageUrl": null,
    "image": "anime-atlas.png",
    "imageAlt": "A screenshot of the anime atlas embedding visualization showing the UI and a section of the embedding with labels and markers indicating which ones the user has watched",
    "startDate": "Apr. 2022",
    "endDate": "May 2022"
  },
  {
    "name": "Browser-Based Neural Network Playground",
    "description": "A browser-based tool for building, training, visualizing, and experimenting with neural networks.  Written in Rust, compiled to WebAssembly with SIMD.  It can learn arbitrary functions via randomly sampled examples, showing its progress on a 3D surface plot.  There is support for changing all network parameters like the number of layers, the activation function for each layer, learning rate, and more.  It also includes visualizations of individual neurons' responses to explore the internal workings of the network.",
    "projectUrl": "https://nn-viz.ameo.design",
    "srcUrl": "https://github.com/Ameobea/neural-network-from-scratch",
    "technologies": [
      "Rust",
      "WebAssembly",
      "Wasm SIMD",
      "TypeScript",
      "Machine Learning",
      "React"
    ],
    "pageUrl": "/blog/neural-network-experiments-and-visualizations/",
    "image": "nn-viz.jpg",
    "imageAlt": "A screenshot of the neural network web application itself which shows the full UI, network response visualization, neuron output and response visualization, and costs plot",
    "startDate": "Aug. 2021",
    "endDate": "Apr. 2022"
  },
  {
    "name": "Mini 3D World in the Browser",
    "description": "A small 3D world built using Three.js and Blender that runs in the web browser.  Accompanied by a YouTube mini-series of short videos going over the process of creating it and explaining some of the background concepts.",
    "projectUrl": "https://terrain.ameo.design/v4/",
    "videoUrl": "https://www.youtube.com/playlist?list=PLbw41Lu0QRVunnfMe9ASp0XgGx-37nnT_",
    "srcUrl": null,
    "technologies": [
      "Three.JS",
      "Blender",
      "TypeScript",
      "Rust",
      "WebAssembly",
      "GLSL",
      "WebGL"
    ],
    "pageUrl": null,
    "image": "3d-world.png",
    "imageAlt": "A screenshot of the 3D world in the browser showing a floating island with clouds in the background, grass, low-poly trees, a mountain, texturing, and a FPS counter",
    "startDate": "Feb. 2022",
    "endDate": "Mar. 2022"
  },
  {
    "name": "Music Galaxy",
    "description": "Music Galaxy is is the culmination of several months of work with artist relationship data from Spotify. It is an interative 3D visualization of the relationships between over 70,000 artists, positioning them in such a way that artists with similar audiences are positioned closer together in space. It also supports connecting to users' Spotify accounts to visualize where their personal favorite artists exist in context of the greater musical universe.",
    "projectUrl": "https://galaxy.spotifytrack.net",
    "srcUrl": "https://github.com/Ameobea/spotifytrack/tree/main/frontend/src/musicGalaxy",
    "technologies": [
      "TypeScript",
      "Three.JS",
      "WebGL",
      "Rust",
      "WebAssembly",
      "Python",
      "word2vec",
      "node2vec"
    ],
    "pageUrl": "/blog/building-music-galaxy/",
    "image": "music-galaxy-twtr.png",
    "imageAlt": "A screenshot of music galaxy showing a zoomed-out view of the visualization with several labeled artists",
    "startDate": "Aug 2021",
    "endDate": "Oct 2021"
  },
  {
    "name": "Speeding up the `rnnoise` library with SIMD",
    "description": "`rnnoise` is an open source noise suppression library based on a recurrent neural network.  It is used in various software, and I use it myself on my desktop as a part of `pulseeffects`.  I located a hot function in the application used for actually applying the neural network's weights which was taking up significant portion of its CPU time, and I realized it could be sped up significantly with SIMD. I converted the code to use SIMD intrinsics which yielded a huge reduction in CPU usage. I also contributed a pull request to the rnnoise repository with the changes.",
    "projectUrl": "https://github.com/xiph/rnnoise/pull/191",
    "technologies": ["C", "SIMD", "perf"],
    "pageUrl": null,
    "image": "rnnoise-godbolt.png",
    "imageAlt": "A screenshot of the godbolt web interface showing the generated assembly from the code from rnnoise that I sped up with SIMD",
    "startDate": "Jul 2021",
    "endDate": "Jul 2021"
  },
  {
    "name": "Spotify Related Artists Graph Visualization",
    "description": "An interactive web-based visualization of related artists on Spotify based on data from the Spotify web API.  It allows patterns in music styles and artists to be seen in a way that moves beyond traditional genre classifications.  The visualization is integrated into my Spotifytrack project.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/spotifytrack/",
    "technologies": [
      "TypeScript",
      "React",
      "d3",
      "Rust",
      "WebAssembly",
      "Wasm SIMD",
      "perf",
      "WebCola"
    ],
    "pageUrl": null,
    "image": "spotify_related_artists_graph.png",
    "imageAlt": "A screenshot of the spotify related artists graph visualization showing the network of my personal artists and their connections to each other based on user listening patterns",
    "startDate": "May 2021",
    "endDate": "June 2021"
  },
  {
    "name": "MIDI Editor Web Application",
    "description": "A fully in-browser MIDI editor built as a part of my broader browser-based audio synthesis platform (see below).  It's the second browser-based MIDI editor I've made, and fixes many of the issues from the first one.  It's currently only available as a module of the web synth platform, but I plan to make it into a standalone webapp as well.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/web-synth",
    "technologies": ["TypeScript", "PIXI.JS", "Rust", "WebAssembly"],
    "pageUrl": null,
    "image": "midi_editor.png",
    "imagAlt": "A screenshot of the MIDI editor showing several notes on the grid with one of them selected, the cursor, the keyboard, and several other UI features",
    "startDate": "Mar. 2021",
    "endDate": null
  },
  {
    "name": "Audio Synthesis Research Notes + Documentation",
    "description": "As I've delved deeper into audio synthesis and DSP programming topics, I've started recording my findings and creating a personal knowledge repository using Foam, a personal knowledge management and sharing system for VSCode (https://github.com/foambubble/foam).  Topics range from FM synthesis to speech/singing synthesis as well as some documentation for my web synth project.  I plan to continue expanding this knowledge base and possibly extend it into other areas that I spend time learning about in the future.",
    "projectUrl": "https://notes.ameo.design/docs/",
    "srcUrl": "https://github.com/Ameobea/web-synth/tree/master/docs",
    "technologies": ["Foam", "Markdown", "Gatsby"],
    "pageUrl": null,
    "image": "foam-graph.png",
    "imageAlt": "A network visualization of my Foam repository so far showing links between pages as edges",
    "startDate": "Feb. 2021",
    "endDate": null
  },
  {
    "name": "Wasm-powered FM Synthesizer",
    "description": "An 8-operator frequency modulation synthesizer built in Rust and WebAssembly with SIMD that runs 100% in the web browser via WebAudio.  Built as a standalone demo, it is also integrated into the full web-based audio synthesis and experimentation platform I'm building.",
    "projectUrl": "https://notes.ameo.design/fm.html",
    "srcUrl": "https://github.com/ameobea/web-synth/",
    "technologies": [
      "Rust",
      "WebAssembly",
      "SIMD",
      "WebAudio",
      "TypeScript",
      "PIXI.JS"
    ],
    "pageUrl": null,
    "image": "fm-synth.png",
    "imageAlt": "A screenshot of the FM synth demo webpage",
    "startDate": "Dec. 2020",
    "endDate": "Mar. 2021"
  },
  {
    "name": "Quavertrack",
    "description": "Built in a weekend, this website does the same thing as my previous project osu!track (which took me months to build).  It allows players of the rhythm game Quaver to track their progress and view how their stats progress over time as well as providing visualizations of their hiscore distribution and a few other features.",
    "projectUrl": "https://quavertrack.net/",
    "srcUrl": "https://github.com/ameobea/quavertrack",
    "technologies": [
      "Rust",
      "TypeScript",
      "PostgreSQL",
      "React",
      "Google Cloud Run"
    ],
    "pageUrl": null,
    "image": "quavertrack.png",
    "imageAlt": "A screenshot of the Quavertrack interface showing a scatter plot for my hiscores",
    "startDate": "Aug. 2020",
    "endDate": "Aug. 2020"
  },
  {
    "name": "Circle Game",
    "description": "A little toy game I'm building for fun based off an old idea from years ago.  It's a great opportunity to try out WebAssembly in the frontend, do some linear algebra and graphics programming, and do something creative.  It's mostly a fancy tech demo right now and may never be anything more, but it's a ton of fun to work on.",
    "projectUrl": null,
    "srcUrl": null,
    "technologies": ["Rust", "WebAssembly", "GLSL"],
    "pageUrl": null,
    "image": "circle.png",
    "imageAlt": "A screenshot of the game showing pathfinding debugging and some dynamically added user-created barriers",
    "startDate": "Jun. 2020",
    "endDate": "?"
  },
  {
    "name": "SPF420 x SYNC^UP",
    "description": "I built and managed all of the tech for the revival of online concert series SPF420. This consisted of a fully custom streaming setup through which multiple artists could stream to my server and be displayed side-by-side on an output livestream and a website featuring a fully custom-built chat with moderation and interactive cursor trails + stickers.  The first event on March 28 topped out at over 250 concurrent viewers and lasted nearly 6 hours.  More similar events are planned.",
    "srcUrl": null,
    "technologies": [
      "FFMPEG",
      "OBS",
      "WebAssembly",
      "Rust",
      "NGINX-RTMP",
      "WebSocket",
      "TypeScript"
    ],
    "pageUrl": "/projects/spf420_x_syncup",
    "image": "spf420_x_syncup.png",
    "imageAlt": "A screenshot of the SPF420 x SYNC^UP website on which the concert took place.  Shows the livestream, custom chat, and interactive components.",
    "startDate": "Mar. 2020",
    "endDate": "?"
  },
  {
    "name": "Project Sync^Up Website",
    "description": "I helped out a team of people organizing a set of three simulatneous concerts in San Francicso, New York, and Chicago connected by live stream and streaming online.  I built the website (https://syncup.world) and handled the technical side of the livestream and web experience.  The website was fully responsive with advanced styling to maintain the look of a poster on devices of all sizes and aspect ratios.  However, all of the concerts were canceled due to COVID-19.  ",
    "projectUrl": "https://syncup.world",
    "srcUrl": null,
    "technologies": ["Gatsby", "React", "JavaScript"],
    "pageUrl": null,
    "image": "syncup.png",
    "imageAlt": "A screenshot of the Project Sync^Up Website that I built to announce the event and provide links to buy tickets for the participating venues",
    "startDate": "Jan. 2020",
    "endDate": "Mar. 2020"
  },
  {
    "name": "SpotifyTrack",
    "description": "A Work-In-Progress site showing users' top songs and artists and listening patterns over time, providing a shareable link that they can use to show it off to friends.  May include features for tracking the popularity or artists/songs/etc. over time as well.",
    "projectUrl": "https://spotifytrack.net/",
    "srcUrl": "https://github.com/Ameobea/spotify-homepage/",
    "technologies": ["Rust", "TypeScript", "React", "Redux", "jantix"],
    "pageUrl": null,
    "image": "spotifytrack.png",
    "imageAlt": "A very early view of the SpotifyTrack user stats page",
    "startDate": "Apr. 2019",
    "endDate": null
  },
  {
    "name": "jantix",
    "description": "A fully-featured TypeScript library defining a self-contained 100% type-safe Redux architecture.  Jantix staticly ensures the validity and cohesion of your actions/reducers/state and provides a very clean, 100% strictly typed interface through which to interact with them.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/jantix/",
    "technologies": ["TypeScript", "Redux", "React"],
    "pageUrl": null,
    "image": "jantix.png",
    "imageAlt": "A screenshot of the VS Code text editor demonstrating the type inference provided by the Jantix library",
    "startDate": "May 2019",
    "endDate": "May 2019"
  },
  {
    "name": "Ant Colony Simulation",
    "description": "An interactive ant colony simulation that I created as a project for my Simulation and Modeling class at school.  Made using my Minutiae simulation framework, ants lay pheromones and work together to gather food in a world full of obstacles.",
    "projectUrl": "https://ants.ameo.design/",
    "srcUrl": "https://github.com/Ameobea/sketches/tree/ants/ants",
    "technologies": [
      "Rust",
      "WebAssembly",
      "WebGL",
      "Minutiae",
      "JavaScript",
      "TypeScript",
      "React"
    ],
    "pageUrl": "/projects/ants/",
    "image": "ants.png",
    "imageAlt": "A screenshot of the ant colony simulation showing ants (white), pheromone trails (pink/blue), food (green), and barriers (white).",
    "startDate": "Nov. 2018",
    "endDate": "Dec. 2018"
  },
  {
    "name": "This Website",
    "description": "A homepage for myself with the primary purpose of showcasing my professional skills and achievements as well as personal projects and interests.  I aimed to create something that demonstrates my skills as a web developer as well as gives others insight into myself and what I do.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/homepage/",
    "technologies": ["Gatsby", "React"],
    "pageUrl": "/projects/homepage/",
    "image": "homepage.png",
    "imageAlt": "A screenshot of the homepage of this website",
    "startDate": "Nov. 2018",
    "endDate": null
  },
  {
    "name": "Web-Based MIDI Editor + Synthesizer",
    "description": "The goal of this project is to create a web-based music creation application that can be used entirely within the browser.  Since the modern WebAudio API provides everything necessary to create complicated synthesizers and perform advanced audio processing, I believed that the web could work as an accessible environment in which to build this.",
    "projectUrl": "https://notes.ameo.design/",
    "srcUrl": "https://github.com/ameobea/web-synth/",
    "technologies": ["Rust", "WebAssembly", "WebAudio"],
    "pageUrl": "/projects/notes/",
    "image": "notes.png",
    "imageAlt": "A screenshot of my online MIDI editor's UI showcasing drawn MIDI notes and controls for the synthesizer that plays when they are drawn and selected.",
    "startDate": "Sep. 2018",
    "endDate": null
  },
  {
    "name": "react-control-panel",
    "description": "A React port of the control-panel (https://github.com/freeman-lab/control-panel) library.  I maintained 100% visual appearance and functionality parity with the original library while making it usable from React.  I also added several additional features such as making panels draggable, making UI state external, and adding an Proxy-based interface for manipulating the UI state externally.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/react-control-panel",
    "technologies": ["React", "JavaScript"],
    "pageUrl": "/projects/react-control-panel/",
    "image": "react-control-panel.png",
    "imageAlt": "A screenshot of the react-control-panel UI showing two programatically generated control panels using the light and dark color themes",
    "startDate": "Sep. 2018",
    "endDate": "Sep. 2018"
  },
  {
    "name": "phost",
    "description": "Server and TUI for managing and deploying static websites and files.  Deployments are created as subdomains, allowing a directory of static files (such as one produced by `yarn build`) to go from your computer to being hosted at `project.ameo.design` with a single command.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/phost/",
    "technologies": ["Python", "Docker", "Apache2", "Django"],
    "pageUrl": "/blog/phost/",
    "image": "phost.png",
    "imageAlt": "A screenshot of the command line after running two phost commands for listing existing deployments and updating the deployment for the development version of this website.",
    "startDate": "Sep. 2018",
    "endDate": "Sep. 2018"
  },
  {
    "name": ".io-style Game",
    "description": "A friend and I wanted to work on a game together, trying out some tech that we were interested in and building up all parts of a game from scratch.  I handled the frontend and the physics while my friend focused on setting up the backend server.  At the end, we came up with a networked physics engine based on a popular Rust physics framework that runs the same code on both the client and the server.\n\nA variety of techniques were used for handling network delay, synchronizing state, and keeping track of game data both internally on the client as well as on the server.",
    "projectUrl": "https://io.ameo.design/",
    "srcUrl": "https://github.com/ameobea/io-game/",
    "technologies": [
      "Elixir",
      "Phoenix",
      "Rust",
      "WebAssembly",
      "nphysics",
      "Protocol Buffers",
      "WebSockets"
    ],
    "pageUrl": "/projects/io-game/",
    "image": "io.png",
    "imageAlt": "A screenshot of the .io-style game that I created, showing created \"asteroids\", a player entity with a rotateable beam, and a procedurally generated background.",
    "startDate": "Jul. 2018",
    "endDate": "Aug. 2018"
  },
  {
    "name": "Robintrack",
    "description": "A tool for viewing data about the popularity of various stocks on the Robinhood brokerage. Allows users to view the most (and least) popular stocks held by its users and view trends over time.  Robintrack gained significant popularity, with several people reaching out to use the data it collected for school or personal research and the Robinhood team reaching out to me directly about it.",
    "projectUrl": "https://robintrack.net/",
    "srcUrl": "https://github.com/ameobea/robintrack/",
    "technologies": [
      "JavaScript",
      "React",
      "Redux",
      "Echarts",
      "Ruby",
      "Rails",
      "Redis",
      "RabbitMQ",
      "Python",
      "MongoDB",
      "Docker"
    ],
    "pageUrl": "/blog/building-robintrack/",
    "image": "robintrack.png",
    "imageAlt": "A screenshot of the \"Popularity Changes\" page from Robintrack, showing the table of stocks with large recent popularity changes and a chart plotting the popularity vs price of the NVDA stock.",
    "startDate": "Apr. 2018",
    "endDate": "Jun. 2018"
  },
  {
    "name": "Volumetric Rendering Experiment",
    "description": "A small demo of volumetric rendering via raymarching in the web browser using Rust, Emscripten/asm.js, GPU.js, and Emscripten.  It creates a matrix of 3D noise and then pans around it, rendering the results to a canvas.  All of the raymarching algorithmic and linear algebra was implemented from scratch, and the idea for the project was for it to serve as an excercise forme to learn how the whole process works from start to finish.",
    "projectUrl": "https://volumetric.ameo.design/",
    "srcUrl": "https://github.com/Ameobea/minutiae/tree/master/volumetric",
    "technologies": ["Rust", "asm.js", "Emscripten", "GPU.js", "JavaScript"],
    "pageUrl": "/projects/volumetric/",
    "image": "volumetric.png",
    "imageAlt": "A view of the volumetric rendering output showing the generated 3D noise projected onto a canvas",
    "startDate": "Aug. 2017",
    "endDate": "Aug. 2017"
  },
  {
    "name": "Noise Function Compositor",
    "description": "A web application developed using Rust + WebAssembly for creating and visualizing compositions of noise functions.  3D noise functions are projected onto a 2D canvas after being mapped through a colorizer function, creating intricate and psychedelic effects.  Includes a web backend for sharing + browsing compositions from other users.",
    "projectUrl": "https://noise.ameo.design/",
    "srcUrl": "https://github.com/ameobea/noise-asmjs",
    "technologies": [
      "Rust",
      "WebAssembly/Asm.JS",
      "JavaScript",
      "React",
      "Redux",
      "HTML",
      "MySQL",
      "Semantic UI",
      "Diesel",
      "Rocket"
    ],
    "pageUrl": "/blog/creating-noise-function-compositor/",
    "image": "noise.png",
    "imageAlt": "A screenshot of the noise compositor UI showing the composition tree, settings for an input transformation that zooms and scales its input, and the output of the composited and colorized noise function.",
    "startDate": "Jun. 2017",
    "endDate": "Sep. 2017"
  },
  {
    "name": "Minutiae",
    "description": "A simulation engine that operates on a finite 2-dimensional universe populated by cells and entities. It is designed to provide a modular system on top of which simulations of various types can be designed.  Can be compiled into WebAssembly and run in the browser, optionally including client/server functionality.  Minutiae is used in several of my other projects.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/minutiae/",
    "technologies": ["Rust", "WebSocket"],
    "pageUrl": "/projects/minutiae/",
    "image": "minutiae.png",
    "imageAlt": "A minutiae simulation in which particles (colorized by a hidden noise function composition) are intermittently attracted to or repelled by each other, producing a dynamic scene reminiscent of sand in low gravity.",
    "startDate": "May 2017",
    "endDate": null
  },
  {
    "name": "Cryptoviz",
    "description": "A live depth-of-market (DOM) web-based visualization for live orderbook data from the Poloniex cryptocurrency exchange. Allows traders and quantitative analysts to gain unique insight into the current state of the market by viewing complex market activity in real time.",
    "projectUrl": "https://cryptoviz.net/",
    "srcUrl": "https://github.com/ameobea/cryptoviz/",
    "technologies": ["JavaScript", "React", "WebSocket", "Paper.JS"],
    "pageUrl": "/projects/cryptoviz/",
    "image": "cryptoviz.png",
    "imageAlt": "A screenshot of a Cryptoviz visualization demonstrating orderbook activity in Litecoin (LTC) on Poloniex.  Notably evident is an occurance where a large sell order caused the market price to drop quickly and significantly.",
    "startDate": "Apr. 2017",
    "endDate": "Jun. 2017"
  },
  {
    "name": "Polotrack",
    "description": "A web application providing an overview of a user's portfolio on the Poloniex cryptocurrency exchange.  It shows detailed visualizations of current holdings, demonstrates how portfolio value has changed over time, and provides a variety of advanced analytics detailing a user's trading history and account activity.",
    "projectUrl": "https://ameo.link/polotrack/",
    "srcUrl": "https://github.com/ameobea/polotrack/",
    "technologies": [
      "JavaScript",
      "React",
      "MySQL",
      "Node.JS",
      "Rust",
      "Rocket",
      "Highcharts"
    ],
    "pageUrl": "/projects/polotrack/",
    "image": "polotrack.png",
    "imageAlt": "A screenshot of the overview page of the Polotrack UI, demonstrating a listing of current holdings and their value, a pie chart visualizing those listings, and several other data fields showing information about the current portfolio and its performance.",
    "startDate": "Apr. 2017",
    "endDate": "May 2017"
  },
  {
    "name": "TickGrinder",
    "description": "TickGrinder is a high performance algorithmic trading platform written primarily in Rust.  It is designed with the goal of efficiently processing event-based market data as quickly as possible in order to automatically place and manage trades.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/tickgrinder/",
    "technologies": [
      "Rust",
      "React",
      "C++",
      "MySQL",
      "Boost",
      "Java",
      "Tantivy"
    ],
    "pageUrl": "/projects/tickgrinder/",
    "image": "tickgrinder.png",
    "imageAlt": "A screenshot of the work-in-progress TickGrinder control UI, showing a list of spawned instances managed by the platform as well as a dropdown that can be used to spawn new instances.",
    "startDate": "Aug. 2016",
    "endDate": "Mar. 2017"
  },
  {
    "name": "Elotrack",
    "description": "Site that tracked the gameplay statistics of League of Legends players.  Users could view as their rank changed as they played and view a variety of other statistics about their gameplay habits.  Elotrack was eventually taken offline due to the League of Legends API that it made use of being discontinued.",
    "projectUrl": null,
    "srcUrl": null,
    "technologies": ["Ruby", "Sinatra", "MySQL", "JQuery", "Highcharts"],
    "pageUrl": "/projects/elotrack/",
    "image": "elotrack.png",
    "imageAlt": "A screenshot of the UI of the Elotrack website, showing a user's statistics page including several charts plotting how their statistics have changed over time as well as figures detailing their recent performance in ranked.",
    "startDate": "Jan. 2015",
    "endDate": "May 2015"
  },
  {
    "name": "osu!track",
    "description": "Site where players of the game osu! can track their progress and view the progression of others.  Pulls data from the osu! API, storing time series data and creating a variety of charts, plots, statistics, and other visualizations for a variety of different metrics.  An in-game chat bot and Discord bot were also written to allow users to update their stats from in-game.  Thousands of players a month continue to use osu!track.",
    "projectUrl": "https://ameobea.me/osutrack/",
    "srcUrl": null,
    "technologies": [
      "PHP",
      "MySQL",
      "JQuery",
      "Bootstrap",
      "Highcharts",
      "Node.JS",
      "Python"
    ],
    "pageUrl": "/projects/osutrack/",
    "image": "osutrack.png",
    "imageAlt": "A screenshot of a user's osu!track profile, showing statistics about their account and a scatter plot showing the scores on their best plays over time.",
    "startDate": "Jul. 2014",
    "endDate": "Feb. 2015"
  }
]
