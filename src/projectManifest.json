[
  {
    "name": "Fixing a Bug in the Chromium Browser",
    "description": "I discovered, root-caused, and fixed a bug in the Chromium browser's Devtools involving network requests made by worklets.  I wrote regression tests for the fix and landed two commits to Chromium repos that have since been shipped in live versions of Chromium/Google Chrome, fixing the issue for all users of the browser.",
    "projectUrl": "https://chromium-review.googlesource.com/c/chromium/src/+/5726981",
    "srcUrl": null,
    "technologies": ["C++"],
    "pageUrl": "/blog/fixing-a-bug-in-google-chrome/",
    "image": "chromium-gerrit.png",
    "imageAlt": "A screenshot of one of the Gerrit code review UIs from one of the pull requests I made to fix the bug in Chromium.  It shows a dark-themed UI with lots of text and fields typical of a code review tool.  It shows the PR name (Devtools: Update `InspectorNetworkAgent` to support worklets), PR description, and list of changed files and diff.  There are some badges containing the names of people who reviewed the code as well as some other badges indicating that the change has been merged.",
    "startDate": "Jul. 2024",
    "endDate": "Sept. 2024"
  },
  {
    "name": "CSG.JS Rust + WebAssembly Port",
    "description": "I ported the CSG.js Constructive Solid Geometry library created by Evan Wallace (github.com/evanw/csg.js) to Rust and integrated it with other mesh processing and manipulation code I use as part of my browser-based 3D projects.\n\nI experimented with performance improvements and other modifications to the library with the goal of producing manifold meshes with minimal triangle counts as output.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/sketches-3d/blob/main/src/viz/wasm/mesh/src/csg.rs",
    "technologies": ["Rust", "WebAssembly"],
    "pageUrl": null,
    "image": "csg-js-rust.png",
    "imageAlt": "A screenshot of a mesh produced as the output of subtracting a torus from a cube.  There is a semi-circular gouge in one face of the sphere which appears to be smooth and seamlessly connected.  The mesh is shaded using `MeshNormalMaterial` from Three.JS which makes it appear in a variety of pastels depending on the angle between each point on its surface and the camera.",
    "startDate": "Jul. 2024",
    "endDate": "Aug. 2024"
  },
  {
    "name": "Experiments with Kolmogorov-Arnold Networks",
    "description": "I implemented KANs from scratch in Tinygrad and spent some time experimenting with them and training them for some toy use cases.\n\nI experimented with some of my own variations on the KAN theme and wrote a blog post about the results.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/kan",
    "technologies": ["Tinygrad", "Python"],
    "pageUrl": "/blog/trying-out-kans/",
    "image": "kan.png",
    "imageAlt": "A screenshot of a plot showing a the results of a KAN trained to fit a 1D function.  It shows a orange line labeled \"Actual\" making a zigzag pattern along with an orange line labeled \"Predicted\" which follows the orange one pretty closely, but with some inaccuracy especially near sharp turns.",
    "startDate": "Jun. 2024",
    "endDate": "Jul. 2024"
  },
  {
    "name": "3D Mesh Deformation + Normal Calculation",
    "description": "I developed a code pipeline for subdividing 3D meshes, programmatically deforming + manipulating them, and computing accurate normals for both shading and displacement.  This included a deep-dive into the Blender codebase to figure out how they computed normals for smooth-by-angle shading.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/sketches-3d/blob/main/src/viz/wasm/mesh/src/linked_mesh.rs",
    "technologies": ["Rust", "WebAssembly", "Blender", "3D"],
    "pageUrl": null,
    "image": "mesh-deformation.jpg",
    "imageAlt": "A side-by-side comparison of pre and post deformation versions of a scene rendered in Three.JS against a pure black background.  The scene consists of a gray rectangular platform with several geometric shapes hovering over it, colored with a gray stone or concrete-like material.  The left shows mostly rough and simple forms, while the right is much more organic-looking with lots of curves, warps, and shadows visible.",
    "startDate": "May 2024",
    "endDate": "Jun. 2024"
  },
  {
    "name": "osu! Beatmap Atlas",
    "description": "Another embedding visualization using data from my osu!track project.  I used the process I've tuned over the past few embedding visualizations along with a fully from-scratch renderer using raw WebGL shaders.",
    "projectUrl": "https://osu-atlas.ameo.dev",
    "srcUrl": "https://github.com/ameobea/osu-beatmap-atlas",
    "technologies": ["TypeScript", "WebGL", "GLSL", "Svelte", "SvelteKit"],
    "pageUrl": "/blog/building-embedding-visualizations-from-user-profiles",
    "image": "osu-atlas.png",
    "imageAlt": "A screenshot of an embedding visualization web application for the rhythm game osu!.  It shows a variety of colored circles arrayed on a black background with some circles highlighted and more opaque than the others.  There's a variety of UI components for searching, filtering, and viewing details about specific data points.",
    "startDate": "Apr. 2024",
    "endDate": "May 2024"
  },
  {
    "name": "three-hex-tiling",
    "description": "I created a library that extends built-in Three.JS materials to support infinite, non-repeating, seamless texture tiling.  The hex tiling algorithm itself is ported from a Shadertoy by Fabrice Neyret and extended with my own changes to optimize performance and and customize the look of the tiling.  The library can be added to almost any existing Three.JS project and includes several config options for the tiling.",
    "projectUrl": "https://three-hex-tiling.ameo.design",
    "srcUrl": "https://github.com/ameobea/three-hex-tiling",
    "technologies": ["Three.JS", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "three-hex-tiling.jpg",
    "imageAlt": "Screenshot showing comparison between a repeating seamless texture with and without three-hex-tiling.  The image is divided in half horizontally by a gray bar.  The left side is labeled \"baseline\" and shows a gray rock-like texture that clearly repeats, resulting in an artificial grid-like pattern.  The right side has the same gray rock texture but without any visible tiling and is labeled three-hex-tiling.",
    "startDate": "Nov. 2023",
    "endDate": "Nov. 2023"
  },
  {
    "name": "3D Stone Level",
    "description": "A 3D scene built in Three.JS which makes use of multiple other 3D projects I've worked on in the prior months: Volumetric fog, procedural LOD terrain, and decorations generated using geodesic paths.  The scene itself features gray stone walls and terrain and has an objective where the player must collect totems hidden around the level to unlock the exit.",
    "projectUrl": "https://3d.ameo.design/stone.html",
    "srcUrl": "https://github.com/ameobea/sketches-3d",
    "technologies": ["Three.JS", "Blender", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "stone-level.png",
    "imageAlt": "A screenshot of the cave level rendered with Three.JS.  It shows a large gray stone wall with a door in the bottom, illuminated by an eerie green light.  The player is standing on a shiny stone walkway/bridge which crosses over a depression in the terrain which is filled with blue volumetric fog.",
    "startDate": "Sept. 2023",
    "endDate": "Oct. 2023"
  },
  {
    "name": "Mesh Wrapping via Geodesic Paths",
    "description": "I developed a system of generating and wrapping meshes around other meshes using geodesic paths.  I compile the code for it (including both Rust and C++) into WebAssembly and use it to create procedurally generated decorations for my 3D scenes.  I also created an accompanying blog post detailing the process and the math behind it.",
    "projectUrl": "https://cprimozic.net/blog/wrapping-meshes-with-geodesic-walks/",
    "srcUrl": "https://github.com/Ameobea/sketches-3d/tree/main/src/viz/wasm/geodesics",
    "technologies": ["Rust", "WebAssembly", "C++", "Three.JS"],
    "pageUrl": null,
    "image": "geodesic-paths.png",
    "imageAlt": "A screenshot of a deformed torus rendered in Three.JS with an array of thin shiny metallic curlicues wrapping around part of it",
    "startDate": "Oct. 2023",
    "endDate": "Oct. 2023"
  },
  {
    "name": "LOD Terrain System for Three.JS",
    "description": "A system for rendering large procedurally generated terrain in Three.JS efficiently.  It splits the terrain up into segments and renders distant segments at a lower level of detail to speed up rendering.\n\nThe system handles building 3D terrain from heightmaps generated on a web worker and textures provided by the user, making sure that segments render without gaps or seams as they're swapped in and out.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/sketches-3d/tree/main/src/viz/terrain",
    "technologies": ["Three.JS", "WebGL", "TypeScript"],
    "pageUrl": null,
    "image": "lod-terrain.png",
    "imageAlt": "A screenshot of a debug view of the LOD terrain system.  It shows some procedurally generated terrain rendered as a wireframe with different colors representing different levels of detail.",
    "startDate": "Sept. 2023",
    "endDate": "Oct. 2023"
  },
  {
    "name": "Volumetric Fog Shader",
    "description": "A relatively feature-rich volumetric fog shader for Three.JS.  It raymarches a density field generated using noise functions, rendering dynamic fog in real time.\n\nIt integrates into the pmndrs postprocessing system and has many configuration options. It uses analytical gradient-based techniques to implement lighting with dynamic light sources.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/sketches-3d/tree/main/src/viz/shaders/volumetric",
    "technologies": ["Three.JS", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "volumetric-fog.png",
    "imageAlt": "Screenshot of a scene rendered using Three.JS using the volumetric fog shader I developed.  The ground is made out of black rock and has hills in a checkerboard pattern. Gray-white fluffy fog is present in the low parts of the terrain, and there is a bright pink light shining on the fog's surface in one of the squares.  There is a stone wall surrounding the terrain, and the perspective of the scene is from on top of this wall.",
    "startDate": "Sept. 2023",
    "endDate": "Sept. 2023"
  },
  {
    "name": "3D Cave Level",
    "description": "Part of my 3D work in Three.JS, this scene consists of a large cave and serves as a transition level.  It was built using a mix of procedural and hand-made techniques for the cave, textures with triplanar mapping, and decorations consisting of stalagmites and stalactites.\n\nI also spent time making improvements to the base game engine like adding sound effects, a pause menu with settings, and a standardized postprocessing pipeline.",
    "projectUrl": "https://3d.ameo.design/cave.html",
    "srcUrl": "https://github.com/ameobea/sketches-3d",
    "technologies": ["Three.JS", "Blender", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "cave-level.png",
    "imageAlt": "A screenshot of the cave level.  Shows a dark, narrow cave composed of gray striated rock.  There are large, prominent stalagmites and stalactites in the foreground.",
    "startDate": "Sept. 2023",
    "endDate": "Sept. 2023"
  },
  {
    "name": "3D Smoke Level",
    "description": "A continuation of my 3D work with Three.JS. TSome highlights include heavy volumetric godrays and procedurally generated 3D Vicsek fractals (the large cubes visible in the screenshot).\n\nThis scene served as a sort of warm-up project as I got back into 3D work after several months spent working on other things.",
    "projectUrl": "https://3d.ameo.design/smoke.html",
    "srcUrl": "https://github.com/ameobea/sketches-3d",
    "technologies": ["Three.JS", "Blender", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "smoke-level.png",
    "imageAlt": "A screenshot of the smoke level.  Shows intense orange fog and godrays, floating fractal structures composed out of large dark cubes with stone-like texturing and patterns, and four orange/yellow lights glowing in the distance supported by long poles.",
    "startDate": "Aug. 2023",
    "endDate": "Aug. 2023"
  },
  {
    "name": "Bonsai Networks",
    "description": "I developed a method for training Bonsai Networks - extremely sparse computational graphs produced by training and pruning RNNs - using Tinygrad. They provide an interpretable view into the solutions learned by networks for simple logic problems, breaking out of the black box neural networks typically reside in.\n\nI wrote up a detailed blog post with several embedded interactive visualizations showing the networks in action.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/rnn-viz",
    "technologies": ["tinygrad", "Python", "TypeScript"],
    "pageUrl": "https://cprimozic.net/blog/growing-sparse-computational-graphs-with-rnns/",
    "image": "bonsai-networks.png",
    "imageAlt": "A graph representation of a Bonsai Network showing the connectivity of neural network components that make it up, rendered with graphviz and colored corresponding to the current value passing through each node.",
    "startDate": "May 2023",
    "endDate": "Aug. 2023"
  },
  {
    "name": "Sample Library Embedding Browser",
    "description": "An experiment for generating embeddings from an audio sample library and a UI for visually exploring the sample library in 2D space. The samples processed with MFCC for feature extraction, the embeddings are generated using UMAP, and the UI is built with Svelte + D3.The tool is integrated into the sample library module of my web synth project.",
    "projectUrl": "https://twitter.com/Ameobea10/status/1648231955308363776?s=20",
    "srcUrl": "https://github.com/Ameobea/web-synth/tree/main/src/sampleLibrary/embeddingBrowser",
    "technologies": ["Python", "Svelte", "D3", "TypeScript", "embeddings"],
    "pageUrl": null,
    "image": "sample-library-embedding-browser.png",
    "imageAlt": "A screenshot of the sample library embedding browser.  It shows a 2D scatter plot of the embeddings of a sample library.  The samples are colored by category as estimated by the sample name, and are roughly organized into clusters by color.  There is a label along the bottom of the embedding showing information about the hovered sample, which is from a Fox Stevenson sample pack.  There is a search bar at the top.",
    "startDate": "Apr. 2023",
    "endDate": "Apr. 2023"
  },
  {
    "name": "Signal Analyzer for Web Synth",
    "description": "A combined spectrogram + oscilloscope module for my web-synth project. It integrates into web synth and can be used to analyze any signal. The visualizations are built using lots of cool modern web tech including SharedArrayBuffer, Atomics, OffscreenCanvas, Rust compiled to WebAssembly + Wasm SIMD, and more.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/web-synth/tree/main/src/signalAnalyzer",
    "technologies": ["Rust", "WebAssembly", "TypeScript"],
    "pageUrl": null,
    "image": "web-synth-signal-analyzer.png",
    "imageAlt": "A screenshot of the signal analyzer module in web synth.  It shows a spectrogram rendered as a white line on top, and an oscilloscope rendered as a magenta line on the bottom.  The spectrogram shows a complex spectrum with lots of harmonics, tapering off into the higher frequencies. The oscilloscope shows a distorted supersaw waveform.",
    "startDate": "Mar. 2023",
    "endDate": "Apr. 2023"
  },
  {
    "name": "llama.cpp AVX-512 Support",
    "description": "I added support for AVX-512 to the popular llama.cpp LLM project.  This sped up inference by a bit on processors that support it.  The work was quickly obsoleted by other optimizations to the rapidly evolving project, but it was a fun experience to contribute to that effort.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ggerganov/llama.cpp/pull/320",
    "technologies": ["C++", "SIMD"],
    "pageUrl": null,
    "image": null,
    "imageAlt": null,
    "startDate": "Mar. 2023",
    "endDate": "Mar. 2023"
  },
  {
    "name": "Wavetable Editor for Web Synth",
    "description": "A small utility added to web synth to allow users to build their own wavetables by adding in harmonics individually.  This builds on the existing wavetable support for the FM synth, allowing users to build their own wavetables in addition to importing them from files.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/web-synth/tree/main/src/fmSynth/Wavetable",
    "technologies": ["TypeScript", "WebAudio"],
    "pageUrl": null,
    "image": "web-synth-wavetable-editor.png",
    "imageAlt": "A screenshot of the web synth wavetable editor.  Shows many sliders to control adding in harmonics as well as controls to move through the wavetable and adjust playback.  There is a box on the top showing a relatively complex waveform rendered in red.",
    "startDate": "Feb. 2023",
    "endDate": "Mar. 2023"
  },
  {
    "name": "Web Synth Enhancements",
    "description": "I picked active development of web synth back up with the goal of producing \"real music\" using the tool.  I prioritized filling some gaps in features as well as polishing up the application as a whole.  Some of what I worked on includes building an OTT-style multi-band compressor, a mixer UI with level visualization, revamping the MIDI editor to support multiple tracks, adding a welcome page, building a custom dynamic bandpass filter, moving MIDI scheduling to the audio thread, adding time-tracked automation tracks, and fixing tons of bugs.",
    "projectUrl": "https://synth.ameo.dev",
    "srcUrl": "https://github.com/ameobea/web-synth",
    "technologies": [
      "TypeScript",
      "WebAudio",
      "WebAssembly",
      "Rust",
      "DSP",
      "SIMD"
    ],
    "pageUrl": null,
    "image": "web-synth.jpg",
    "imageAlt": "Combined screenshots of the Web Synth application showing the graph editor for the audio patch network and a part of the synth designer UI with envelope generators, param controls, and the FM synth modulation matrix",
    "startDate": "Nov. 2022",
    "endDate": null
  },
  {
    "name": "3D Rainy Scene",
    "description": "A continuation of my 3D work with Three.JS. This scene was inspired by the \"Rainy Apartments\" level from the game Yume 2kki. Everything is modeled by hand in Blender and rendered with Three.JS, using lots of postprocessing for a distance blur effect.  Integrates with web synth for rain sounds.",
    "projectUrl": "https://3d.ameo.design/rainy.html",
    "srcUrl": "https://github.com/Ameobea/sketches-3d/blob/main/src/viz/scenes/rainy/rainy.ts",
    "technologies": ["Three.JS", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "rainy-sketch.png",
    "imageAlt": "A screenshot of the rainy scene.  It is a dark gray scene with a black railing and some concrete pillars, like a long balcony that is part of an apartment complex.  There are many dark concrete skyscrapers in the background, blurring into the background as they go further back into the distance.",
    "startDate": "Oct. 2022",
    "endDate": "Oct. 2022"
  },
  {
    "name": "three-good-godrays",
    "description": "A collaboration with @N8Programs, porting his godrays shader for Three.JS into a library that integrates with the pmndrs postprocessing library. The shader is a high-quality volumetric lighting effect that generates very cool looking godrays in any Three.JS project, with lots of controls for configuring the effect.",
    "projectUrl": "https://three-good-godrays.ameo.design",
    "srcUrl": "https://github.com/ameobea/three-good-godrays",
    "technologies": ["Three.JS", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "three-good-godrays.png",
    "imageAlt": "A screenshot of the three-good-godrays demo showing a scene with volumetric lighting and godrays.  A bright pink light shines through a vertical array of black slats set in the side of a huge indistinct black structure in the background.  There are very prominent and intense godrays in the air, giving it the appearance of being very humid or smokey.  The ground is rock and there are black pillars casting long and stark shadows across it.",
    "startDate": "Oct. 2022",
    "endDate": "Oct. 2022"
  },
  {
    "name": "Spector.js Bugfixes for Large Scenes",
    "description": "While working on my Three.JS projects, I used the Spector.JS tool to debug performance issues and was encountering some crashes when trying to load large scenes with it.  I contributed some fixes to expand support to much larger scenes to the project, and speed up the extension significantly in some cases.",
    "projectUrl": null,
    "srcUrl": "https://github.com/BabylonJS/Spector.js/pull/244",
    "technologies": ["JavaScript"],
    "pageUrl": null,
    "image": null,
    "imageAlt": null,
    "startDate": "Oct. 2022",
    "endDate": "Oct. 2022"
  },
  {
    "name": "Seamless Texture Stitcher",
    "description": "Web-based utility to combine multiple seamlessly tiling textures into a single larger texture. This is a useful alternative to expensive runtime methods like hex tiling. It works very well when using AI-generated seamless textures, and I used it in some of my 3D sketches.  Written in Rust + compiled to WebAssembly.",
    "projectUrl": "https://texture-utils.ameo.design/seamless-stitcher/",
    "srcUrl": "https://github.com/ameobea/texture-utils",
    "technologies": [
      "Rust",
      "WebAssembly",
      "TypeScript",
      "Svelte",
      "SvelteKit"
    ],
    "pageUrl": null,
    "image": "seamless-stitcher.png",
    "imageAlt": "A screenshot of the seamless texture stitcher tool showing the UI on the right and a preview of the stitched texture on the left.  The stitched texture is a concrete pattern and it consists of 4 different concrete textures blended together while maintaining the seamless tiling.  The UI consists of a matrix of squares for controlling each of the sub-textures including selecting the source texture to use, rotating, and offsetting.",
    "startDate": "Sep. 2022",
    "endDate": "Oct. 2022"
  },
  {
    "name": "3D Pinklights Scene",
    "description": "Continuation of my 3D work with Three.JS and Blender. An alien-looking environment with bright pink animated volumetric lighting.  Includes my first proof-of-concept integration with my web synth project to play some dynamically generated music.",
    "projectUrl": "https://3d.ameo.design/pinklights.html",
    "srcUrl": "https://github.com/Ameobea/sketches-3d/blob/main/src/viz/scenes/chasms/chasms.ts",
    "technologies": ["Three.JS", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "pinklights-sketch.png",
    "imageAlt": "A screenshot of the pinklights scene.  It shows a bright panel in the background with dark slats over it which is casting long horizontal shadows over a rocky-looking pixelated ground.  There are some hills around the area and the camera is placed in a small valley.  It looks kind of like if you were inside a terrarium.",
    "startDate": "Sep. 2022",
    "endDate": "Oct. 2022"
  },
  {
    "name": "3D Bridge Scene",
    "description": "The result of a lot of experiments with Three.JS and Blender.  Full first person controls with collision detection + physics, lots of custom shaders + textures, and web synth integration for sound effects.  The scene itself consists of a bridge over a void with many floating monoliths and an alien-looking environment.",
    "projectUrl": "https://3d.ameo.design/bridge2.html",
    "srcUrl": "https://github.com/Ameobea/sketches-3d/blob/main/src/viz/scenes/bridge2/bridge2.ts",
    "technologies": ["Three.JS", "WebGL", "TypeScript", "glsl"],
    "pageUrl": null,
    "image": "bridge2-sketch.png",
    "imageAlt": "A screenshot of the bridge scene.  It shows a pastel-colored sky in the background with a yellow sun disc.  There are some floating geometric monoliths on the left, and some dark wall-like structures on the right casting prominent shadows.  The ground looks to be rocky with embedded metal that reflects golden in the light.",
    "startDate": "Aug. 2022",
    "endDate": "Sept. 2022"
  },
  {
    "name": "3D Sketches, Demos, and Experiments",
    "description": "A collection of small interactive game-like 3D environments and demos.  Somewhat inspired by games like Yume Nikki/Yume 2kki, Over the Void, and others.  There is no overarching goal or theme, but this work may lead to a larger project in the future.\n\nThe demos are all browser-based, rendered with Three.JS + WebGL and use 3D models I'm creating myself in Blender.  Includes some work with procedural materials and custom shaders inspired by projects on Shadertoy.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/sketches-3d",
    "technologies": ["Three.JS", "WebGL", "Blender", "glsl", "TypeScript"],
    "pageUrl": null,
    "image": "3d-sketches.png",
    "imageAlt": "A screenshot of one of the 3D sketches I created as a part of this project.  A golden arch made out of a metallic-rocky material stands on a concrete plinth.  It sits in what looks like a sort of shrine with curved stone arches.  There is a cobblestone floor and stone walls.  The graphics are reminiscent of PS2 games or similar style.",
    "startDate": "Aug. 2022",
    "endDate": null
  },
  {
    "name": "Neural Network Experiments + Research",
    "description": "While working on an idea for an interactive visualization of RNNs, I ended up going down a rabbit hole of exploration and experimentation in the realm of neural networks, machine learning, and information theory.  Work included developing a new activation function, using ideas from other research papers to estimate the Kolmogorov and boolean complexities of different functions, and reverse-engineering a neural network's clever solution to binary addition.\n\nThis work culminated in a lengthy blog post full of interactive visualizations to illustrate the concepts involved.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/rnn-viz",
    "technologies": [
      "React",
      "TypeScript",
      "WebGL",
      "Three.JS",
      "Rust",
      "TensorFlow.JS",
      "WebAssembly"
    ],
    "pageUrl": "/blog/boolean-logic-with-neural-networks/",
    "image": "neural-network-logic.png",
    "imageAlt": "A screenshot of a 3D wireframe cube with some areas filled in with colored voxels.  The cube's corners are labeled with input combinations like TTF, TFT, FFF",
    "startDate": "Jun. 2022",
    "endDate": "Aug. 2022"
  },
  {
    "name": "Interactive ML-Powered Anime Recommendation Tool",
    "description": "An anime recommendation engine powered by a custom-built neural network.  Using a dataset of user profiles from the popular site MyAnimeList, the network was trained entirely in the browser via Tensorflow.JS.\n\nThe whole thing is implemented as a SvelteKit app with predictions happening directly within the app itself using tfjs-node and a background thread.  Additional post-processing is applied to work around imbalances due to large popularity differences. It also contains support for determining which ratings contribute most to each of the recommendations.",
    "projectUrl": "https://anime.ameo.dev",
    "srcUrl": null,
    "technologies": [
      "TypeScript",
      "Svelte",
      "SvelteKit",
      "Machine Learning",
      "Neural Networks",
      "Tensorflow"
    ],
    "pageUrl": null,
    "image": "anime-recommendations.png",
    "imageAlt": "A screenshot of the anime recommendations page of the site showing the UI and several recommended animes",
    "startDate": "Apr. 2022",
    "endDate": "May 2022"
  },
  {
    "name": "Interactive 2D Anime Embedding Visualization",
    "description": "In a similar vein to the Music Galaxy (a few projects down), this is an embedding visualization that is constructed based off of relationships between anime.  A co-occurrence matrix is constructed from a large dataset of user anime rankings which is then used to construct a variety of embeddings using different algorithms (PyMDE + GGVec) and parameters.  The embedding is then projected into 2D with t-SNE.\n\nThe visualization itself is built with PIXI.JS and has the ability to search + fly to anime as well as load in user profiles from MyAnimeList to visualize where one's own anime rankings lie in the broader context.",
    "projectUrl": "https://anime.ameo.dev/pymde_3d_40n",
    "srcUrl": null,
    "technologies": ["TypeScript", "PIXI.JS", "Svelte", "SvelteKit", "Python"],
    "pageUrl": null,
    "image": "anime-atlas.png",
    "imageAlt": "A screenshot of the anime atlas embedding visualization showing the UI and a section of the embedding with labels and markers indicating which ones the user has watched",
    "startDate": "Apr. 2022",
    "endDate": "May 2022"
  },
  {
    "name": "Browser-Based Neural Network Playground",
    "description": "A browser-based tool for building, training, visualizing, and experimenting with neural networks.  Written in Rust, compiled to WebAssembly with SIMD.  It can learn arbitrary functions via randomly sampled examples, showing its progress on a 3D surface plot.  There is support for changing all network parameters like the number of layers, the activation function for each layer, learning rate, and more.  It also includes visualizations of individual neurons' responses to explore the internal workings of the network.",
    "projectUrl": "https://nn-viz.ameo.design",
    "srcUrl": "https://github.com/Ameobea/neural-network-from-scratch",
    "technologies": [
      "Rust",
      "WebAssembly",
      "Wasm SIMD",
      "TypeScript",
      "Machine Learning",
      "React"
    ],
    "pageUrl": "/blog/neural-network-experiments-and-visualizations/",
    "image": "nn-viz.jpg",
    "imageAlt": "A screenshot of the neural network web application itself which shows the full UI, network response visualization, neuron output and response visualization, and costs plot",
    "startDate": "Aug. 2021",
    "endDate": "Apr. 2022"
  },
  {
    "name": "Mini 3D World in the Browser",
    "description": "A small 3D world built using Three.js and Blender that runs in the web browser.  Accompanied by a YouTube mini-series of short videos going over the process of creating it and explaining some of the background concepts.",
    "projectUrl": "https://terrain.ameo.design/v4/",
    "videoUrl": "https://www.youtube.com/playlist?list=PLbw41Lu0QRVunnfMe9ASp0XgGx-37nnT_",
    "srcUrl": null,
    "technologies": [
      "Three.JS",
      "Blender",
      "TypeScript",
      "Rust",
      "WebAssembly",
      "GLSL",
      "WebGL"
    ],
    "pageUrl": null,
    "image": "3d-world.png",
    "imageAlt": "A screenshot of the 3D world in the browser showing a floating island with clouds in the background, grass, low-poly trees, a mountain, texturing, and a FPS counter",
    "startDate": "Feb. 2022",
    "endDate": "Mar. 2022"
  },
  {
    "name": "Music Galaxy",
    "description": "Music Galaxy is is the culmination of several months of work with artist relationship data from Spotify. It is an interactive 3D visualization of the relationships between over 70,000 artists, positioning them in such a way that artists with similar audiences are positioned closer together in space. It also supports connecting to users' Spotify accounts to visualize where their personal favorite artists exist in context of the greater musical universe.",
    "projectUrl": "https://galaxy.spotifytrack.net",
    "srcUrl": "https://github.com/Ameobea/spotifytrack/tree/main/frontend/src/musicGalaxy",
    "technologies": [
      "TypeScript",
      "Three.JS",
      "WebGL",
      "Rust",
      "WebAssembly",
      "Python",
      "word2vec",
      "node2vec"
    ],
    "pageUrl": "/blog/building-music-galaxy/",
    "image": "music-galaxy-twtr.png",
    "imageAlt": "A screenshot of music galaxy showing a zoomed-out view of the visualization with several labeled artists",
    "startDate": "Aug 2021",
    "endDate": "Oct 2021"
  },
  {
    "name": "Speeding up the `rnnoise` library with SIMD",
    "description": "`rnnoise` is an open source noise suppression library based on a recurrent neural network.  It is used in various software, and I use it myself on my desktop as a part of `pulseeffects`.  I located a hot function in the application used for actually applying the neural network's weights which was taking up significant portion of its CPU time, and I realized it could be sped up significantly with SIMD. I converted the code to use SIMD intrinsics which yielded a huge reduction in CPU usage. I also contributed a pull request to the rnnoise repository with the changes.",
    "projectUrl": "https://github.com/xiph/rnnoise/pull/191",
    "technologies": ["C", "SIMD", "perf"],
    "pageUrl": null,
    "image": "rnnoise-godbolt.png",
    "imageAlt": "A screenshot of the godbolt web interface showing the generated assembly from the code from rnnoise that I sped up with SIMD",
    "startDate": "Jul 2021",
    "endDate": "Jul 2021"
  },
  {
    "name": "rocket_async_compression",
    "description": "A small library adding support for response compression to the Rocket web framework for Rust.  It uses the `async-compression` library to provide support for gzip, deflate, brotli, and zstd compression.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/rocket_async_compression",
    "technologies": ["Rust"],
    "pageUrl": null,
    "image": null,
    "imageAlt": null,
    "startDate": "Jul 2021",
    "endDate": "Jul 2021"
  },
  {
    "name": "Spotify Related Artists Graph Visualization",
    "description": "An interactive web-based visualization of related artists on Spotify based on data from the Spotify web API.  It allows patterns in music styles and artists to be seen in a way that moves beyond traditional genre classifications.  The visualization is integrated into my Spotifytrack project.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/spotifytrack/",
    "technologies": [
      "TypeScript",
      "React",
      "d3",
      "Rust",
      "WebAssembly",
      "Wasm SIMD",
      "perf",
      "WebCola"
    ],
    "pageUrl": null,
    "image": "spotify_related_artists_graph.png",
    "imageAlt": "A screenshot of the spotify related artists graph visualization showing the network of my personal artists and their connections to each other based on user listening patterns",
    "startDate": "May 2021",
    "endDate": "Jun. 2021"
  },
  {
    "name": "MIDI Editor Web Application",
    "description": "A fully in-browser MIDI editor built as a part of my broader browser-based audio synthesis platform (see below).  It's the second browser-based MIDI editor I've made, and fixes many of the issues from the first one.  It's currently only available as a module of the web synth platform, but I plan to make it into a standalone webapp as well.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/web-synth",
    "technologies": ["TypeScript", "PIXI.JS", "Rust", "WebAssembly"],
    "pageUrl": null,
    "image": "midi_editor.png",
    "imagAlt": "A screenshot of the MIDI editor showing several notes on the grid with one of them selected, the cursor, the keyboard, and several other UI features",
    "startDate": "Mar. 2021",
    "endDate": null
  },
  {
    "name": "Audio Synthesis Research Notes + Documentation",
    "description": "As I've delved deeper into audio synthesis and DSP programming topics, I've started recording my findings and creating a personal knowledge repository using Foam, a personal knowledge management and sharing system for VSCode (https://github.com/foambubble/foam).  Topics range from FM synthesis to speech/singing synthesis as well as some documentation for my web synth project.  I plan to continue expanding this knowledge base and possibly extend it into other areas that I spend time learning about in the future.",
    "projectUrl": "https://notes.ameo.design/docs/",
    "srcUrl": "https://github.com/Ameobea/web-synth/tree/master/docs",
    "technologies": ["Foam", "Markdown", "Gatsby"],
    "pageUrl": null,
    "image": "foam-graph.png",
    "imageAlt": "A network visualization of my Foam repository so far showing links between pages as edges",
    "startDate": "Feb. 2021",
    "endDate": null
  },
  {
    "name": "Wasm-powered FM Synthesizer",
    "description": "An 8-operator frequency modulation synthesizer built in Rust and WebAssembly with SIMD that runs 100% in the web browser via WebAudio.  Built as a standalone demo, it is also integrated into the full web-based audio synthesis and experimentation platform I'm building.",
    "projectUrl": "https://notes.ameo.design/fm.html",
    "srcUrl": "https://github.com/ameobea/web-synth/",
    "technologies": [
      "Rust",
      "WebAssembly",
      "SIMD",
      "WebAudio",
      "TypeScript",
      "PIXI.JS"
    ],
    "pageUrl": null,
    "image": "fm-synth.png",
    "imageAlt": "A screenshot of the FM synth demo webpage",
    "startDate": "Dec. 2020",
    "endDate": "Mar. 2021"
  },
  {
    "name": "Quavertrack",
    "description": "Built in a weekend, this website does the same thing as my previous project osu!track (which took me months to build).  It allows players of the rhythm game Quaver to track their progress and view how their stats progress over time as well as providing visualizations of their hiscore distribution and a few other features.",
    "projectUrl": "https://quavertrack.net/",
    "srcUrl": "https://github.com/ameobea/quavertrack",
    "technologies": [
      "Rust",
      "TypeScript",
      "PostgreSQL",
      "React",
      "Google Cloud Run"
    ],
    "pageUrl": null,
    "image": "quavertrack.png",
    "imageAlt": "A screenshot of the Quavertrack interface showing a scatter plot for my hiscores",
    "startDate": "Aug. 2020",
    "endDate": "Aug. 2020"
  },
  {
    "name": "Circle Game",
    "description": "A little toy game I'm building for fun based off an old idea from years ago.  It's a great opportunity to try out WebAssembly in the frontend, do some linear algebra and graphics programming, and do something creative.  It's mostly a fancy tech demo right now and may never be anything more, but it's a ton of fun to work on.",
    "projectUrl": null,
    "srcUrl": null,
    "technologies": ["Rust", "WebAssembly", "GLSL"],
    "pageUrl": null,
    "image": "circle.png",
    "imageAlt": "A screenshot of the game showing pathfinding debugging and some dynamically added user-created barriers",
    "startDate": "Jun. 2020",
    "endDate": "?"
  },
  {
    "name": "SPF420 x SYNC^UP",
    "description": "I built and managed all of the tech for the revival of online concert series SPF420. This consisted of a fully custom streaming setup through which multiple artists could stream to my server and be displayed side-by-side on an output livestream and a website featuring a fully custom-built chat with moderation and interactive cursor trails + stickers.  The first event on March 28 topped out at over 250 concurrent viewers and lasted nearly 6 hours.  More similar events are planned.",
    "srcUrl": null,
    "technologies": [
      "FFMPEG",
      "OBS",
      "WebAssembly",
      "Rust",
      "NGINX-RTMP",
      "WebSocket",
      "TypeScript"
    ],
    "pageUrl": "/projects/spf420_x_syncup",
    "image": "spf420_x_syncup.png",
    "imageAlt": "A screenshot of the SPF420 x SYNC^UP website on which the concert took place.  Shows the livestream, custom chat, and interactive components.",
    "startDate": "Mar. 2020",
    "endDate": "?"
  },
  {
    "name": "Project Sync^Up Website",
    "description": "I helped out a team of people organizing a set of three simultaneous concerts in San Francisco, New York, and Chicago connected by live stream and streaming online.  I built the website (https://syncup.world) and handled the technical side of the livestream and web experience.  The website was fully responsive with advanced styling to maintain the look of a poster on devices of all sizes and aspect ratios.  However, all of the concerts were canceled due to COVID-19.  ",
    "projectUrl": "https://syncup.world",
    "srcUrl": null,
    "technologies": ["Gatsby", "React", "JavaScript"],
    "pageUrl": null,
    "image": "syncup.png",
    "imageAlt": "A screenshot of the Project Sync^Up Website that I built to announce the event and provide links to buy tickets for the participating venues",
    "startDate": "Jan. 2020",
    "endDate": "Mar. 2020"
  },
  {
    "name": "SpotifyTrack",
    "description": "A Work-In-Progress site showing users' top songs and artists and listening patterns over time, providing a shareable link that they can use to show it off to friends.  May include features for tracking the popularity or artists/songs/etc. over time as well.",
    "projectUrl": "https://spotifytrack.net/",
    "srcUrl": "https://github.com/Ameobea/spotify-homepage/",
    "technologies": ["Rust", "TypeScript", "React", "Redux", "jantix"],
    "pageUrl": null,
    "image": "spotifytrack.png",
    "imageAlt": "A very early view of the SpotifyTrack user stats page",
    "startDate": "Apr. 2019",
    "endDate": null
  },
  {
    "name": "jantix",
    "description": "A fully-featured TypeScript library defining a self-contained 100% type-safe Redux architecture.  Jantix statically ensures the validity and cohesion of your actions/reducers/state and provides a very clean, 100% strictly typed interface through which to interact with them.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/jantix/",
    "technologies": ["TypeScript", "Redux", "React"],
    "pageUrl": null,
    "image": "jantix.png",
    "imageAlt": "A screenshot of the VS Code text editor demonstrating the type inference provided by the Jantix library",
    "startDate": "May 2019",
    "endDate": "May 2019"
  },
  {
    "name": "Ant Colony Simulation",
    "description": "An interactive ant colony simulation that I created as a project for my Simulation and Modeling class at school.  Made using my Minutiae simulation framework, ants lay pheromones and work together to gather food in a world full of obstacles.",
    "projectUrl": "https://ants.ameo.design/",
    "srcUrl": "https://github.com/Ameobea/sketches/tree/ants/ants",
    "technologies": [
      "Rust",
      "WebAssembly",
      "WebGL",
      "Minutiae",
      "JavaScript",
      "TypeScript",
      "React"
    ],
    "pageUrl": "/projects/ants/",
    "image": "ants.png",
    "imageAlt": "A screenshot of the ant colony simulation showing ants (white), pheromone trails (pink/blue), food (green), and barriers (white).",
    "startDate": "Nov. 2018",
    "endDate": "Dec. 2018"
  },
  {
    "name": "This Website",
    "description": "A homepage for myself with the primary purpose of showcasing my professional skills and achievements as well as personal projects and interests.  I aimed to create something that demonstrates my skills as a web developer as well as gives others insight into myself and what I do.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/homepage/",
    "technologies": ["Gatsby", "React"],
    "pageUrl": "/projects/homepage/",
    "image": "homepage.png",
    "imageAlt": "A screenshot of the homepage of this website",
    "startDate": "Nov. 2018",
    "endDate": null
  },
  {
    "name": "Web-Based MIDI Editor + Synthesizer",
    "description": "The goal of this project is to create a web-based music creation application that can be used entirely within the browser.  Since the modern WebAudio API provides everything necessary to create complicated synthesizers and perform advanced audio processing, I believed that the web could work as an accessible environment in which to build this.",
    "projectUrl": "https://notes.ameo.design/",
    "srcUrl": "https://github.com/ameobea/web-synth/",
    "technologies": ["Rust", "WebAssembly", "WebAudio"],
    "pageUrl": "/projects/notes/",
    "image": "notes.png",
    "imageAlt": "A screenshot of my online MIDI editor's UI showcasing drawn MIDI notes and controls for the synthesizer that plays when they are drawn and selected.",
    "startDate": "Sep. 2018",
    "endDate": null
  },
  {
    "name": "react-control-panel",
    "description": "A React port of the control-panel (https://github.com/freeman-lab/control-panel) library.  I maintained 100% visual appearance and functionality parity with the original library while making it usable from React.  I also added several additional features such as making panels draggable, making UI state external, and adding an Proxy-based interface for manipulating the UI state externally.",
    "projectUrl": null,
    "srcUrl": "https://github.com/Ameobea/react-control-panel",
    "technologies": ["React", "JavaScript"],
    "pageUrl": "/projects/react-control-panel/",
    "image": "react-control-panel.png",
    "imageAlt": "A screenshot of the react-control-panel UI showing two programmatically generated control panels using the light and dark color themes",
    "startDate": "Sep. 2018",
    "endDate": "Sep. 2018"
  },
  {
    "name": "phost",
    "description": "Server and TUI for managing and deploying static websites and files.  Deployments are created as subdomains, allowing a directory of static files (such as one produced by `yarn build`) to go from your computer to being hosted at `project.ameo.design` with a single command.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/phost/",
    "technologies": ["Python", "Docker", "Apache2", "Django"],
    "pageUrl": "/blog/phost/",
    "image": "phost.png",
    "imageAlt": "A screenshot of the command line after running two phost commands for listing existing deployments and updating the deployment for the development version of this website.",
    "startDate": "Sep. 2018",
    "endDate": "Sep. 2018"
  },
  {
    "name": ".io-style Game",
    "description": "A friend and I wanted to work on a game together, trying out some tech that we were interested in and building up all parts of a game from scratch.  I handled the frontend and the physics while my friend focused on setting up the backend server.  At the end, we came up with a networked physics engine based on a popular Rust physics framework that runs the same code on both the client and the server.\n\nA variety of techniques were used for handling network delay, synchronizing state, and keeping track of game data both internally on the client as well as on the server.",
    "projectUrl": "https://io.ameo.design/",
    "srcUrl": "https://github.com/ameobea/io-game/",
    "technologies": [
      "Elixir",
      "Phoenix",
      "Rust",
      "WebAssembly",
      "nphysics",
      "Protocol Buffers",
      "WebSockets"
    ],
    "pageUrl": "/projects/io-game/",
    "image": "io.png",
    "imageAlt": "A screenshot of the .io-style game that I created, showing created \"asteroids\", a player entity with a rotateable beam, and a procedurally generated background.",
    "startDate": "Jul. 2018",
    "endDate": "Aug. 2018"
  },
  {
    "name": "Robintrack",
    "description": "A tool for viewing data about the popularity of various stocks on the Robinhood brokerage. Allows users to view the most (and least) popular stocks held by its users and view trends over time.  Robintrack gained significant popularity, with several people reaching out to use the data it collected for school or personal research and the Robinhood team reaching out to me directly about it.",
    "projectUrl": "https://robintrack.net/",
    "srcUrl": "https://github.com/ameobea/robintrack/",
    "technologies": [
      "JavaScript",
      "React",
      "Redux",
      "Echarts",
      "Ruby",
      "Rails",
      "Redis",
      "RabbitMQ",
      "Python",
      "MongoDB",
      "Docker"
    ],
    "pageUrl": "/blog/building-robintrack/",
    "image": "robintrack.png",
    "imageAlt": "A screenshot of the \"Popularity Changes\" page from Robintrack, showing the table of stocks with large recent popularity changes and a chart plotting the popularity vs price of the NVDA stock.",
    "startDate": "Apr. 2018",
    "endDate": "Jun. 2018"
  },
  {
    "name": "Volumetric Rendering Experiment",
    "description": "A small demo of volumetric rendering via raymarching in the web browser using Rust, Emscripten/asm.js, GPU.js, and Emscripten.  It creates a matrix of 3D noise and then pans around it, rendering the results to a canvas.  All of the raymarching algorithmic and linear algebra was implemented from scratch, and the idea for the project was for it to serve as an excercise forme to learn how the whole process works from start to finish.",
    "projectUrl": "https://volumetric.ameo.design/",
    "srcUrl": "https://github.com/Ameobea/minutiae/tree/master/volumetric",
    "technologies": ["Rust", "asm.js", "Emscripten", "GPU.js", "JavaScript"],
    "pageUrl": "/projects/volumetric/",
    "image": "volumetric.png",
    "imageAlt": "A view of the volumetric rendering output showing the generated 3D noise projected onto a canvas",
    "startDate": "Aug. 2017",
    "endDate": "Aug. 2017"
  },
  {
    "name": "Noise Function Compositor",
    "description": "A web application developed using Rust + WebAssembly for creating and visualizing compositions of noise functions.  3D noise functions are projected onto a 2D canvas after being mapped through a colorizer function, creating intricate and psychedelic effects.  Includes a web backend for sharing + browsing compositions from other users.",
    "projectUrl": "https://noise.ameo.design/",
    "srcUrl": "https://github.com/ameobea/noise-asmjs",
    "technologies": [
      "Rust",
      "WebAssembly/Asm.JS",
      "JavaScript",
      "React",
      "Redux",
      "HTML",
      "MySQL",
      "Semantic UI",
      "Diesel",
      "Rocket"
    ],
    "pageUrl": "/blog/creating-noise-function-compositor/",
    "image": "noise.png",
    "imageAlt": "A screenshot of the noise compositor UI showing the composition tree, settings for an input transformation that zooms and scales its input, and the output of the composited and colorized noise function.",
    "startDate": "Jun. 2017",
    "endDate": "Sep. 2017"
  },
  {
    "name": "Minutiae",
    "description": "A simulation engine that operates on a finite 2-dimensional universe populated by cells and entities. It is designed to provide a modular system on top of which simulations of various types can be designed.  Can be compiled into WebAssembly and run in the browser, optionally including client/server functionality.  Minutiae is used in several of my other projects.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/minutiae/",
    "technologies": ["Rust", "WebSocket"],
    "pageUrl": "/projects/minutiae/",
    "image": "minutiae.png",
    "imageAlt": "A minutiae simulation in which particles (colorized by a hidden noise function composition) are intermittently attracted to or repelled by each other, producing a dynamic scene reminiscent of sand in low gravity.",
    "startDate": "May 2017",
    "endDate": null
  },
  {
    "name": "Cryptoviz",
    "description": "A live depth-of-market (DOM) web-based visualization for live orderbook data from the Poloniex cryptocurrency exchange. Allows traders and quantitative analysts to gain unique insight into the current state of the market by viewing complex market activity in real time.",
    "projectUrl": "https://cryptoviz.net/",
    "srcUrl": "https://github.com/ameobea/cryptoviz/",
    "technologies": ["JavaScript", "React", "WebSocket", "Paper.JS"],
    "pageUrl": "/projects/cryptoviz/",
    "image": "cryptoviz.png",
    "imageAlt": "A screenshot of a Cryptoviz visualization demonstrating orderbook activity in Litecoin (LTC) on Poloniex.  Notably evident is an occurance where a large sell order caused the market price to drop quickly and significantly.",
    "startDate": "Apr. 2017",
    "endDate": "Jun. 2017"
  },
  {
    "name": "Polotrack",
    "description": "A web application providing an overview of a user's portfolio on the Poloniex cryptocurrency exchange.  It shows detailed visualizations of current holdings, demonstrates how portfolio value has changed over time, and provides a variety of advanced analytics detailing a user's trading history and account activity.",
    "projectUrl": "https://ameo.link/polotrack/",
    "srcUrl": "https://github.com/ameobea/polotrack/",
    "technologies": [
      "JavaScript",
      "React",
      "MySQL",
      "Node.JS",
      "Rust",
      "Rocket",
      "Highcharts"
    ],
    "pageUrl": "/projects/polotrack/",
    "image": "polotrack.png",
    "imageAlt": "A screenshot of the overview page of the Polotrack UI, demonstrating a listing of current holdings and their value, a pie chart visualizing those listings, and several other data fields showing information about the current portfolio and its performance.",
    "startDate": "Apr. 2017",
    "endDate": "May 2017"
  },
  {
    "name": "TickGrinder",
    "description": "TickGrinder is a high performance algorithmic trading platform written primarily in Rust.  It is designed with the goal of efficiently processing event-based market data as quickly as possible in order to automatically place and manage trades.",
    "projectUrl": null,
    "srcUrl": "https://github.com/ameobea/tickgrinder/",
    "technologies": [
      "Rust",
      "React",
      "C++",
      "MySQL",
      "Boost",
      "Java",
      "Tantivy"
    ],
    "pageUrl": "/projects/tickgrinder/",
    "image": "tickgrinder.png",
    "imageAlt": "A screenshot of the work-in-progress TickGrinder control UI, showing a list of spawned instances managed by the platform as well as a dropdown that can be used to spawn new instances.",
    "startDate": "Aug. 2016",
    "endDate": "Mar. 2017"
  },
  {
    "name": "Elotrack",
    "description": "Site that tracked the gameplay statistics of League of Legends players.  Users could view as their rank changed as they played and view a variety of other statistics about their gameplay habits.  Elotrack was eventually taken offline due to the League of Legends API that it made use of being discontinued.",
    "projectUrl": null,
    "srcUrl": null,
    "technologies": ["Ruby", "Sinatra", "MySQL", "JQuery", "Highcharts"],
    "pageUrl": "/projects/elotrack/",
    "image": "elotrack.png",
    "imageAlt": "A screenshot of the UI of the Elotrack website, showing a user's statistics page including several charts plotting how their statistics have changed over time as well as figures detailing their recent performance in ranked.",
    "startDate": "Jan. 2015",
    "endDate": "May 2015"
  },
  {
    "name": "osu!track",
    "description": "Site where players of the game osu! can track their progress and view the progression of others.  Pulls data from the osu! API, storing time series data and creating a variety of charts, plots, statistics, and other visualizations for a variety of different metrics.  An in-game chat bot and Discord bot were also written to allow users to update their stats from in-game.  Thousands of players a month continue to use osu!track.",
    "projectUrl": "https://ameobea.me/osutrack/",
    "srcUrl": null,
    "technologies": [
      "PHP",
      "MySQL",
      "JQuery",
      "Bootstrap",
      "Highcharts",
      "Node.JS",
      "Python"
    ],
    "pageUrl": "/projects/osutrack/",
    "image": "osutrack.png",
    "imageAlt": "A screenshot of a user's osu!track profile, showing statistics about their account and a scatter plot showing the scores on their best plays over time.",
    "startDate": "Jul. 2014",
    "endDate": "Feb. 2015"
  }
]
